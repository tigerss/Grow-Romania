//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace Shazzam.Shaders {
	
	public class HHEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(HHEffect), 0);
        public static readonly DependencyProperty ScalingProperty = DependencyProperty.Register("Scaling", typeof(double), typeof(HHEffect), new PropertyMetadata(((double)(3.5D)), PixelShaderConstantCallback(0)));
        public static readonly DependencyProperty ScaleProperty = DependencyProperty.Register("Scale", typeof(double), typeof(HHEffect), new PropertyMetadata(((double)(0D)), PixelShaderConstantCallback(1)));
		public HHEffect() {
			PixelShader pixelShader = new PixelShader();
			pixelShader.UriSource = new Uri("/bing;component/HH.ps", UriKind.Relative);
			this.PixelShader = pixelShader;

            this.UpdateShaderValue(ScalingProperty);
            this.UpdateShaderValue(ScaleProperty);
		}
		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		public double Scaling {
			get {
				return ((double)(this.GetValue(ScalingProperty)));
			}
			set {
				this.SetValue(ScalingProperty, value);
			}
		}
        public double Scale
        {
            get
            {
                return ((double)(this.GetValue(ScaleProperty)));
            }
            set
            {
                this.SetValue(ScaleProperty, value);
            }
        }

        public bing.pesteHarta pesteHarta
        {
            get
            {
                throw new System.NotImplementedException();
            }
            set
            {
            }
        }
	}
}
